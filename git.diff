diff --git a/plugin.xml b/plugin.xml
index d7fe3d0..517613f 100644
--- a/plugin.xml
+++ b/plugin.xml
@@ -20,7 +20,8 @@
     <!-- cordova -->
     <engines>
         <engine name="cordova" version=">=3.6.0" />
-        <engine name="cordova-plugman" version=">=4.3.0" />
+        <!-- TODO next version: Probably I meant cordova-lib -->
+        <!-- <engine name="cordova-plugman" version=">=4.3.0" /> -->
         <engine name="cordova-windows" version=">=4.2.0" />
     </engines>
 
@@ -127,7 +128,6 @@
 
         <config-file target="AndroidManifest.xml" parent="/manifest">
             <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED" />
-            <uses-permission android:name="android.permission.QUICKBOOT_POWERON" />
             <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
         </config-file>
 
diff --git a/src/android/LocalNotification.java b/src/android/LocalNotification.java
index b4be09f..5dbb735 100644
--- a/src/android/LocalNotification.java
+++ b/src/android/LocalNotification.java
@@ -23,7 +23,7 @@
 
 package de.appplant.cordova.plugin.localnotification;
 
-import android.app.Activity;
+import android.os.Build;
 
 import org.apache.cordova.CallbackContext;
 import org.apache.cordova.CordovaInterface;
@@ -34,7 +34,6 @@ import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
 
-import java.lang.reflect.Method;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -572,18 +571,8 @@ public class LocalNotification extends CordovaPlugin {
             eventQueue.add(js);
             return;
         }
-        Runnable jsLoader = new Runnable() {
-            public void run() {
-                webView.loadUrl("javascript:" + js);
-            }
-        };
-        try {
-            Method post = webView.getClass().getMethod("post",Runnable.class);
-            post.invoke(webView,jsLoader);
-        } catch(Exception e) {
 
-            ((Activity)(webView.getContext())).runOnUiThread(jsLoader);
-        }
+        webView.sendJavascript(js);
     }
 
     /**
diff --git a/src/android/RestoreReceiver.java b/src/android/RestoreReceiver.java
index 51cdd3f..675ea7c 100644
--- a/src/android/RestoreReceiver.java
+++ b/src/android/RestoreReceiver.java
@@ -23,8 +23,6 @@
 
 package de.appplant.cordova.plugin.localnotification;
 
-import android.util.Log;
-
 import de.appplant.cordova.plugin.notification.AbstractRestoreReceiver;
 import de.appplant.cordova.plugin.notification.Builder;
 import de.appplant.cordova.plugin.notification.Notification;
@@ -42,22 +40,13 @@ public class RestoreReceiver extends AbstractRestoreReceiver {
      * @param notification
      *      Wrapper around the local notification
      */
-    private String tag = "LOCAL_NOTIFICATIONS";
-
     @Override
     public void onRestore (Notification notification) {
-        Log.i(tag,"Invocato restore receiver per la notifica");
-        // ENRICO: Siccome ho già filtrato a monte le notifiche, sono sicuro che quelle che arrivano qui sono buone quindi
-        // skippo il controllo successivo
-        /*if (notification.isScheduled()) {
-            Log.i(tag, "La notifica è schedulata");
+        if (notification.isScheduled()) {
             notification.schedule();
         } else {
-            Log.i(tag,"La notifica non è scehdulata e quindi la elimino");
             notification.cancel();
-        }*/
-        // e mostro direttamente la notifica :D
-        notification.schedule();
+        }
     }
 
     /**
diff --git a/src/android/notification/AbstractRestoreReceiver.java b/src/android/notification/AbstractRestoreReceiver.java
index 4367056..8a1f365 100644
--- a/src/android/notification/AbstractRestoreReceiver.java
+++ b/src/android/notification/AbstractRestoreReceiver.java
@@ -26,7 +26,6 @@ package de.appplant.cordova.plugin.notification;
 import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.Intent;
-import android.util.Log;
 
 import org.json.JSONObject;
 
@@ -47,23 +46,19 @@ abstract public class AbstractRestoreReceiver extends BroadcastReceiver {
      * @param intent
      *      Received intent with content data
      */
-    private String tag = "LOCAL_NOTIFICATIONS";
-
     @Override
     public void onReceive (Context context, Intent intent) {
-        Manager notificationMgr = Manager.getInstance(context);
-        
-        notificationMgr.cleanUpExpiredNotifications();
+        Manager notificationMgr =
+                Manager.getInstance(context);
 
-        Log.i(tag, "Carico le notifiche rimanenti dopo la pulizia");
-        List<JSONObject> options = notificationMgr.getOptions();
+        List<JSONObject> options =
+                notificationMgr.getOptions();
 
         for (JSONObject data : options) {
-            Log.i(tag,"Trovata una notifica da mostrare");
             Builder builder = new Builder(context, data);
 
-            Notification notification = buildNotification(builder);
-            Log.i(tag,"Ho creato la notifica dal builder");
+            Notification notification =
+                    buildNotification(builder);
 
             onRestore(notification);
         }
diff --git a/src/android/notification/Builder.java b/src/android/notification/Builder.java
index e60858b..ab8db3d 100644
--- a/src/android/notification/Builder.java
+++ b/src/android/notification/Builder.java
@@ -131,7 +131,7 @@ public class Builder {
                 .setColor(options.getColor());
 
         if (ledColor != 0) {
-            builder.setLights(ledColor, 100, 100);
+            builder.setLights(ledColor, options.getLedOnTime(), options.getLedOffTime());
         }
 
         if (sound != null) {
diff --git a/src/android/notification/Manager.java b/src/android/notification/Manager.java
index 1d41255..9af3c94 100644
--- a/src/android/notification/Manager.java
+++ b/src/android/notification/Manager.java
@@ -26,20 +26,15 @@ package de.appplant.cordova.plugin.notification;
 import android.app.NotificationManager;
 import android.content.Context;
 import android.content.SharedPreferences;
-import android.os.Build;
-import android.util.Log;
 
 import org.json.JSONException;
 import org.json.JSONObject;
 
 import java.util.ArrayList;
-import java.util.Date;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
 
 import static de.appplant.cordova.plugin.notification.Notification.PREF_KEY;
 
@@ -460,58 +455,4 @@ public class Manager {
                 .getSystemService(Context.NOTIFICATION_SERVICE);
     }
 
-    /**
-     * Enrico:
-     * Questo metodo viene richiamato all'interno dell'onReceive() dell'AbstractRestoreReceiver 
-     * e serve per filtrare le notifiche scadute in modo da non ristorarle all'avvio del device
-     */
-public void cleanUpExpiredNotifications(){
-    	String tag = "LOCAL_NOTIFICATIONS";
-    	Map<String, ?> prefsMap = getPrefs().getAll();
-        ArrayList<String> expiredIds = new ArrayList<String>();
-        Log.d(tag, "Avvio pulizia notifiche");
-        
-        for(Map.Entry<String,?> entry : prefsMap.entrySet()){
-        	Long expireMillis = null;
-            String jsonString = entry.getValue().toString();
-            Pattern pattern = Pattern.compile("(?:\\\"at\\\":)([0-9]{10})");
-            Matcher matcher = pattern.matcher(jsonString);
-            if(matcher.find()){
-            	long parsedSeconds = Long.parseLong(matcher.group(1));
-            	long parsedMillis = parsedSeconds * 1000;
-            	Log.d(tag,"Data attivazione notifica "+entry.getKey()+": "+new Date(parsedMillis));
-            	expireMillis = parsedMillis + (15 * 60 * 1000);
-            }else{
-            	/*
-            	 * CASO IMPOSSIBILE in cui la notifica non ha un campo "at" quindi non verra' mai mostrata
-            	 */
-            	expiredIds.add(entry.getKey());
-            }
-            
-            Log.d(tag,"Data di scadenza della notifica calcolata: "+new Date(expireMillis).toString());
-            boolean expired = new Date().after(new Date(expireMillis));
-        	if(expired){
-        		Log.d(tag,"Notifica scaduta");
-        		expiredIds.add(entry.getKey());
-        	}else{
-        		Log.d(tag,"Notifica ancora necessaria");
-        	}
-
-        }
-        SharedPreferences.Editor editor = getPrefs().edit();
-        for(String id : expiredIds){
-        	Log.d(tag,"Rimuovo notifica "+id);
-        	editor.remove(id);
-        }
-        
-        if (Build.VERSION.SDK_INT< 9) {
-        	editor.commit();
-    	} else {
-    		editor.apply();
-		}
-        Log.d(tag, "Pulizia notifiche completata");
-    }
-
-    
-
 }
diff --git a/src/android/notification/Notification.java b/src/android/notification/Notification.java
index ad36378..29b80b2 100644
--- a/src/android/notification/Notification.java
+++ b/src/android/notification/Notification.java
@@ -176,6 +176,10 @@ public class Notification {
                 context, 0, intent, PendingIntent.FLAG_CANCEL_CURRENT);
 
         if (isRepeating()) {
+          if (wasInThePast()) {
+            triggerTime = System.currentTimeMillis();
+          }
+
             getAlarmMgr().setRepeating(AlarmManager.RTC_WAKEUP,
                     triggerTime, options.getRepeatInterval(), pi);
         } else {
diff --git a/src/android/notification/Options.java b/src/android/notification/Options.java
index 61234d6..b98e89d 100644
--- a/src/android/notification/Options.java
+++ b/src/android/notification/Options.java
@@ -217,6 +217,10 @@ public class Options {
      * Trigger date in milliseconds.
      */
     public long getTriggerTime() {
+//        return Math.max(
+//                System.currentTimeMillis(),
+//                options.optLong("at", 0) * 1000
+//        );
         return options.optLong("at", 0) * 1000;
     }
 
@@ -252,6 +256,42 @@ public class Options {
 
     /**
      * @return
+     *      The time that the LED should be on (in milliseconds).
+     */
+    public int getLedOnTime() {
+        String timeOn = options.optString("ledOnTime", null);
+
+        if (timeOn == null) {
+            return 1000;
+        }
+
+        try {
+            return Integer.parseInt(timeOn);
+        } catch (NumberFormatException e) {
+           return 1000;
+        }
+    }
+
+    /**
+     * @return
+     *      The time that the LED should be off (in milliseconds).
+     */
+    public int getLedOffTime() {
+        String timeOff = options.optString("ledOffTime", null);
+
+        if (timeOff == null) {
+            return 1000;
+        }
+
+        try {
+            return Integer.parseInt(timeOff);
+        } catch (NumberFormatException e) {
+           return 1000;
+        }
+    }
+
+    /**
+     * @return
      *      The notification background color for the small icon
      *      Returns null, if no color is given.
      */
diff --git a/src/ios/APPLocalNotification.m b/src/ios/APPLocalNotification.m
index 03a2d23..f60a73d 100644
--- a/src/ios/APPLocalNotification.m
+++ b/src/ios/APPLocalNotification.m
@@ -609,8 +609,9 @@
     }
 }
 
+#ifdef __IPHONE_8_0
 /**
- * Called on otification settings registration is completed.
+ * Called on notification settings registration is completed.
  */
 - (void) didRegisterUserNotificationSettings:(UIUserNotificationSettings*)settings
 {
@@ -619,6 +620,7 @@
         _command = NULL;
     }
 }
+#endif
 
 #pragma mark -
 #pragma mark Life Cycle
diff --git a/src/ios/APPLocalNotificationOptions.m b/src/ios/APPLocalNotificationOptions.m
index 2d5ad9e..6918919 100644
--- a/src/ios/APPLocalNotificationOptions.m
+++ b/src/ios/APPLocalNotificationOptions.m
@@ -180,7 +180,7 @@ NSString* const DEFAULT_SOUND = @"res://platform_default";
         return NSCalendarUnitYear;
     }
 
-    return 0;
+    return NSCalendarUnitEra;
 }
 
 #pragma mark -
diff --git a/src/ios/UILocalNotification+APPLocalNotification.m b/src/ios/UILocalNotification+APPLocalNotification.m
index 3837253..893f640 100644
--- a/src/ios/UILocalNotification+APPLocalNotification.m
+++ b/src/ios/UILocalNotification+APPLocalNotification.m
@@ -61,7 +61,10 @@ NSInteger const APPLocalNotificationTypeTriggered = 2;
     self.fireDate = options.fireDate;
     self.timeZone = [NSTimeZone defaultTimeZone];
     self.applicationIconBadgeNumber = options.badgeNumber;
-    self.repeatInterval = options.repeatInterval;
+    // required check since iOS 10
+    if (NSCalendarUnitEra != options.repeatInterval) {
+        self.repeatInterval = options.repeatInterval;
+    }
     self.alertBody = options.alertBody;
     self.soundName = options.soundName;
 
diff --git a/www/local-notification-util.js b/www/local-notification-util.js
index 21cc40d..e87409a 100644
--- a/www/local-notification-util.js
+++ b/www/local-notification-util.js
@@ -68,6 +68,8 @@ exports.applyPlatformSpecificOptions = function () {
         defaults.ongoing   = false;
         defaults.autoClear = true;
         defaults.led       = undefined;
+        defaults.ledOnTime = undefined;
+        defaults.ledOffTime = undefined;
         defaults.color     = undefined;
         break;
     }
